county = "Multnomah",
survey = "acs5",
output = "wide",
geometry = TRUE)
or_block <- get_acs(geography = "block",
year = 2022,
variables = c(medrent = "B25064_001"),
state = "OR",
county = "Multnomah",
survey = "acs5",
output = "wide",
geometry = TRUE)
or_tracts <- get_acs(geography = "tract",
year = 2022,
variables = c(medrent = "B25064_001"),
state = "OR",
county = "Multnomah",
survey = "acs5",
output = "wide",
geometry = TRUE)
or_county <- get_acs(geography = "county",
year = 2022,
variables = c(medrent = "B25064_001"),
state = "OR",
county = "Multnomah",
survey = "acs5",
output = "wide",
geometry = TRUE)
or_block <- get_acs(geography = "block group",
year = 2022,
variables = c(medrent = "B25064_001"),
state = "OR",
county = "Multnomah",
survey = "acs5",
output = "wide",
geometry = TRUE)
View(or_county)
or_tracts <- get_acs(geography = "tract",
year = 2022,
variables = c(medrent = "B25064_001"),
state = "OR",
county = "Multnomah",
survey = "acs5",
output = "wide",
geometry = TRUE)
or_county <- get_acs(geography = "county subdivision",
year = 2022,
variables = c(medrent = "B25064_001"),
state = "OR",
county = "Multnomah",
survey = "acs5",
output = "wide",
geometry = TRUE)
or_block <- get_acs(geography = "block group",
year = 2022,
variables = c(medrent = "B25064_001"),
state = "OR",
county = "Multnomah",
survey = "acs5",
output = "wide",
geometry = TRUE)
View(or_county)
tm_shape(or_tracts) +
tm_polygons(col = "medincome", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
# Put all necessary libraries here
library(tidyverse)
library(leaflet)
library(tidycensus)
library(tmap)
tm_shape(or_tracts) +
tm_polygons(col = "medincome", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(or_tracts) +
tm_polygons(col = "medincome", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(or_county) +
tm_polygons(col = "medincome", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(or_tracts) +
tm_polygons(col = "medrentE", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(or_county) +
tm_polygons(col = "medrentE", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(or_block) +
tm_polygons(col = "medrentE", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(or_tracts) +
tm_polygons(col = "medrentE", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County by Tracts, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(or_county) +
tm_polygons(col = "medrentE", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County by County Subdivisons, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(or_block) +
tm_polygons(col = "medrentE", style = "quantile", palette = "BuGn", title = "Median Gross Rent") +
tm_layout(main.title = "Median Gross Rent in Multnomah County by Block Groups, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
library(shiny)
# User interface
ui <- fluidPage(
titlePanel("Which Math 241 name is most popular?"),
sidebarLayout(
sidebarPanel(
# Create a text input widget
textInput(inputId = "names", # value of the object internally
label = "Enter Math 241 names here", # what the user sees
value = "Adrien"),
p("Put single space between the names.")
),
mainPanel(
)
)
)
View(ui)
server <- function(input, output){
# I mostly just copy the static plot BUT
# My plot needs to react to the users' choice
# I want to use renderPlot to make it interactive
output$graph <- renderPlot({ # see how the name matches the name I indicated in the plotOutput
dat_names <- babynames %>%
group_by(year, name) %>%
summarize(n = sum(n)) %>%
group_by(year) %>%
mutate(prop = n/sum(n)) %>%
filter(name %in% c(unlist(str_split(input$names, " "))),
year >= 1980)
ggplot(data = dat_names,
mapping = aes(x = year, y = prop,color = name)) +
geom_line(size = 2)
})
}
server <- function(input, output){
# I mostly just copy the static plot BUT
# My plot needs to react to the users' choice
# I want to use renderPlot to make it interactive
output$graph <- renderPlot({ # see how the name matches the name I indicated in the plotOutput
dat_names <- babynames %>%
group_by(year, name) %>%
summarize(n = sum(n)) %>%
group_by(year) %>%
mutate(prop = n/sum(n)) %>%
filter(name %in% c(unlist(str_split(input$names, " "))),
year >= 1980)
ggplot(data = dat_names,
mapping = aes(x = year, y = prop,color = name)) +
geom_line(size = 2)
})
}
# User interface
ui <- fluidPage(
titlePanel("Which Math 241 name is most popular?"),
sidebarLayout(
sidebarPanel(
# Create a text input widget
textInput(inputId = "names", # value of the object internally
label = "Enter Math 241 names here", # what the user sees
value = "Adrien"),
p("Put single space between the names.")
),
mainPanel(
)
)
)
runApp('shiny/shiny.R')
runApp('shiny/shiny.R')
runApp('shiny/shiny.R')
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(mosaic)
library(tidyverse)
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
library(mosaic)
library(tidyverse)
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
)
)
)
server <- function(input, output){
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
}
shinyApp(ui = ui, server = server)
library(mosaic)
library(tidyverse)
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
)
)
)
server <- function(input, output){
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
library(mosaic)
library(tidyverse)
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(
),
mainPanel(plotOutput(outputId = "graph")
)
)
)
server <- function(input, output){
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
library(mosaic)
library(tidyverse)
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(      selectizeInput(inputId = "names",
label = "Enter Math 241 names here",
choices = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"),
multiple = TRUE),
),
mainPanel(plotOutput(outputId = "graph")
)
)
)
server <- function(input, output){
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% choices) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
library(mosaic)
library(tidyverse)
choices1 = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(      selectizeInput(inputId = "names",
label = "Enter Math 241 names here",
choices = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"),
multiple = TRUE),
),
mainPanel(plotOutput(outputId = "graph")
)
)
)
server <- function(input, output){
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% choices1) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
library(mosaic)
library(tidyverse)
choices1 = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(      selectizeInput(inputId = "names",
label = "Enter Math 241 names here",
choices = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"),
multiple = TRUE),submitButton("Update Results!")
),
mainPanel(plotOutput(outputId = "graph")
)
)
)
server <- function(input, output){
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% choices1) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
library(mosaic)
library(tidyverse)
days = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(      selectizeInput(inputId = "names",
label = "Choose the days you want to view",
choices = days,
multiple = TRUE),submitButton("Update Results!")
),
mainPanel(plotOutput(outputId = "graph")
)
)
)
server <- function(input, output){
updateSelectizeInput(session, 'names',
choices = unique(babynames$name),
server = TRUE)
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% days) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
library(mosaic)
library(tidyverse)
days = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(      selectizeInput(inputId = "names",
label = "Choose the days you want to view",
choices = days,
multiple = TRUE),submitButton("Update Results!")
),
mainPanel(plotOutput(outputId = "graph")
)
)
)
server <- function(input, output){
updateSelectizeInput(session, 'names',
choices = unique(babynames$name),
server = TRUE)
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% days) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
library(mosaic)
library(tidyverse)
days = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(      selectizeInput(inputId = "names",
label = "Choose the days you want to view",
choices = days,
multiple = TRUE),submitButton("Update Results!")
),
mainPanel(plotOutput(outputId = "graph")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'names',
choices = choices,
server = TRUE)
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% days) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
library(mosaic)
library(tidyverse)
days = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
Births2015 %>%
filter(wday %in% c("Sun", "Wed", "Fri")) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
ui <- fluidPage(
titlePanel("Which days have the most births?"),
sidebarLayout(
sidebarPanel(      selectizeInput(inputId = "names",
label = "Choose the days you want to view",
choices = days,
multiple = TRUE),submitButton("Update Results!")
),
mainPanel(plotOutput(outputId = "graph")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'names',
choices = days,
server = TRUE)
output$graph <- renderPlot({
Births2015 %>%
filter(wday %in% days) %>%
ggplot(mapping = aes(x = date, y = births,
color = wday)) +
geom_point() +
theme(legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
